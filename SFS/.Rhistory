install.packages()
dir()
sfsBKN <- exp(scan("BKN.sfs"))
sfsBKN
sfsBKN*20
sfsBKN*19
sum(sfsBKN)
sfsBKN*21
sfsBKN
sfsBKNdadi <- matrix(nrow=3,ncol=1)
sfsBKNdadi
sfsBKNdadi[1,1] <- c(length(sfsBKNdadi), "unfolded")
sfsBKNdadi[1,1] <- paste(length(sfsBKNdadi), "unfolded",sep=" ")
sfsBKNdadi
sfsBKNdadi[3,1] <- c(0,rep(1,length(sfsBKN)-2,0)
)
sfsBKNdadi
sfsBKNdadi[3,1] <- paste(c(0,rep(1,length(sfsBKN)-2,0)),sep=" ")
sfsBKNdadi
sfsBKNdadi[3,1] <- paste(c(0,rep(1,length(sfsBKN)-2),0),sep=" ")
sfsBKNdadi[3,1] <- paste(c(0,rep(1,{length(sfsBKN)-2}),0),sep=" ")
paste(c(0,rep(1,{length(sfsBKN)-2}),0),sep=" ")
sfsBKNdadi[3,1] <- paste(0,rep(1,{length(sfsBKN)-2}),0,sep=" ")
paste(0,rep(1,{length(sfsBKN)-2}),0,sep=" ")
rep(1,{length(sfsBKN)-2})
c(0,rep(1,{length(sfsBKN)-2}),0)
paste(c(0,rep(1,{length(sfsBKN)-2}),0))
collapse(c(0,rep(1,{length(sfsBKN)-2}),0))
paste(c(0,rep(1,{length(sfsBKN)-2}),0))
cat(c(0,rep(1,{length(sfsBKN)-2}),0))
sfsBKNdadi[3,1] <- cat(0,rep(1,{length(sfsBKN)-2}),0)
paste(0,rep(1,{length(sfsBKN)-2}),0,collapse=" ")
c(0,rep(1,{length(sfsBKN)-2}),0)
paste(c(0,rep(1,{length(sfsBKN)-2}),0),collapse=" ")
sfsBKNdadi[3,1] <- paste(c(0,rep(1,{length(sfsBKN)-2}),0),collapse=" ")
sfsBKNdadi
sfsBKNdadi[2,1] <- sfsBKN
sfsBKNdadi[2,1] <- paste(sfsBKN,collapse=" ")
sfsBKNdadi
sfsBKNdadi
str(sfsBKNdadi)
write.table(sfsBKNdadi,file="sfsBKN.dadi")
write.table(sfsBKNdadi,file="sfsBKN.dadi",quote=F,row.names=F,col.names=F)

sfsBKN <- exp(scan("BKN.sfs"))
sfsBKNdadi <- matrix(nrow=3,ncol=1)
sfsBKNdadi[1,1] <- paste(length(sfsBKN), "unfolded",sep=" ")
sfsBKNdadi[2,1] <- paste(sfsBKN,collapse=" ")
sfsBKNdadi[3,1] <- paste(c(0,rep(1,{length(sfsBKN)-2}),0),collapse=" ")
write.table(sfsBKNdadi,file="sfsBKN.dadi",quote=F,row.names=F,col.names=F)
sfsTIL <- exp(scan("TIL.sfs"))
sfsTILdadi <- matrix(nrow=3,ncol=1)
sfsTILdadi[1,1] <- paste(length(sfsTIL), "unfolded",sep=" ")
sfsTILdadi[2,1] <- paste(sfsTIL,collapse=" ")
sfsTILdadi[3,1] <- paste(c(0,rep(1,{length(sfsTIL)-2}),0),collapse=" ")
write.table(sfsTILdadi,file="sfsTIL.dadi",quote=F,row.names=F,col.names=F)

sfsBKN <- exp(scan("BKN.sfs"))
sfsBKNdadi <- matrix(nrow=3,ncol=1)
sfsBKNdadi[1,1] <- paste(length(sfsBKN), "unfolded",sep=" ")
sfsBKNdadi[2,1] <- paste(sfsBKN,collapse=" ")
write.table(sfsBKNdadi,file="sfsBKN.dadi",quote=F,row.names=F,col.names=F)

sfsTIL <- exp(scan("TIL.sfs"))
sfsTILdadi <- matrix(nrow=3,ncol=1)
sfsTILdadi[1,1] <- paste(length(sfsTIL), "unfolded",sep=" ")
sfsTILdadi[2,1] <- paste(sfsTIL,collapse=" ")
write.table(sfsTILdadi,file="sfsTIL.dadi",quote=F,row.names=F,col.names=F)
sfsBKN <- exp(scan("BKN.sfs"))
sfsBKNdadi <- matrix(nrow=2,ncol=1)
sfsBKNdadi[1,1] <- paste(length(sfsBKN), "unfolded",sep=" ")
sfsBKNdadi[2,1] <- paste(sfsBKN,collapse=" ")
write.table(sfsBKNdadi,file="sfsBKN.dadi",quote=F,row.names=F,col.names=F)

sfsTIL <- exp(scan("TIL.sfs"))
sfsTILdadi <- matrix(nrow=2,ncol=1)
sfsTILdadi[1,1] <- paste(length(sfsTIL), "unfolded",sep=" ")
sfsTILdadi[2,1] <- paste(sfsTIL,collapse=" ")
write.table(sfsTILdadi,file="sfsTIL.dadi",quote=F,row.names=F,col.names=F)

sfs <- read.table(2dsfs.BKN.TIL.sfs)
sfs <- read.table("2dsfs.BKN.TIL.sfs")
sfs
sfs <- read.table("2dsfs.BKN.TIL.sfs");
sfs
n1=nrow(sfs);
n1
n2=ncol(sfs);
n2
ns=paste(n1,n2,collapse=' ');
ns
ns=paste(ns,"unfolded",collapse=' ');
ns
dadi=NULL;
for(i in 1:n1){
	dadi=c(dadi,as.numeric(sfs[i,]))
}

dadi
n1*n2
write.table(ns,file="2d_BKN_TIL.dadi",col.names=FALSE,row.names=FALSE,quote=FALSE);	
write.table(paste(dadi,collapse=' '),file="2d_BKN_TIL.dadi",col.names=FALSE,row.names=FALSE,quote=FALSE,append=TRUE);
sfs <- exp(read.table("2dsfs.BKN.TIL.sfs"))
sfs
n1=nrow(sfs);
n2=ncol(sfs);
ns=paste(n1,n2,collapse=' ');
ns=paste(ns,"unfolded",collapse=' ');

dadi=NULL;
for(i in 1:n1){
	dadi=c(dadi,as.numeric(sfs[i,]))
}

write.table(ns,file="2d_BKN_TIL.dadi",col.names=FALSE,row.names=FALSE,quote=FALSE);	
write.table(paste(dadi,collapse=' '),file="2d_BKN_TIL.dadi",col.names=FALSE,row.names=FALSE,quote=FALSE,append=TRUE);

sum(sfs)
sfs <- exp(read.table("2dsfs.BKN.TIL.sfs"))*10000000 #we calculated 10 MB of DNA

n1=nrow(sfs);
n2=ncol(sfs);
ns=paste(n1,n2,collapse=' ');
ns=paste(ns,"unfolded",collapse=' ');

dadi=NULL;
for(i in 1:n1){
	dadi=c(dadi,as.numeric(sfs[i,]))
}

write.table(ns,file="2d_BKN_TIL.dadi",col.names=FALSE,row.names=FALSE,quote=FALSE);	
write.table(paste(dadi,collapse=' '),file="2d_BKN_TIL.dadi",col.names=FALSE,row.names=FALSE,quote=FALSE,append=TRUE);

q()
sfsBKN <- exp(scan("../SFS/BKN.sfs"))*10000000 #we calculated 10 MB of DNA
sfsBKN <- sfsBKN[seq(1,length(sfsBKN),2)] # treat as sample from haploid
sfsBKNdadi <- matrix(nrow=2,ncol=1)
sfsBKNdadi[1,1] <- paste(length(sfsBKN), "unfolded",sep=" ")
sfsBKNdadi[2,1] <- paste(sfsBKN,collapse=" ")
write.table(sfsBKNdadi,file="../SFS/sfsBKN.dadi",quote=F,row.names=F,col.names=F)
sfsTIL <- exp(scan("../SFS/TIL.sfs"))*10000000 #we calculated 10 MB of DNA
sfsTIL <- sfsTIL[seq(1,length(sfsTIL),2)] # treat as sample from haploid
sfsTILdadi <- matrix(nrow=2,ncol=1)
sfsTILdadi[1,1] <- paste(length(sfsTIL), "unfolded",sep=" ")
sfsTILdadi[2,1] <- paste(sfsTIL,collapse=" ")
#sfsTILdadi[3,1] <- paste(c(0,rep(1,{length(sfsTIL)-2}),0),collapse=" ")
write.table(sfsTILdadi,file="../SFS/sfsTIL.dadi",quote=F,row.names=F,col.names=F)

### Convert 2d sfs. Script adapted from Jacob Crawford, https://github.com/mfumagalli/ngsToolsDev/blob/master/convert.2Dsfs.to.dadi.R

# Read in 2D sfs
sfs <- exp(read.table("../SFS/2dsfs.TIL.BKN.sfs"))*10000000 #we calculated 10 MB of DNA
sfs <- sfs[seq(1,nrow(sfs),2),seq(1,ncol(sfs),2)]

# Get sample sizes and make header
n1=nrow(sfs);
n2=ncol(sfs);
ns=paste(n1,n2,collapse=' ');
ns=paste(ns,"unfolded",collapse=' ');

# Convert 2D sfs to dadi array format
dadi=NULL;
for(i in 1:n1){
	dadi=c(dadi,as.numeric(sfs[i,]))
}

# Write out dadi format to file with same name as 2D sfs file with .fs appeded
write.table(ns,file="../SFS/2d_TIL_BKN.dadi",col.names=FALSE,row.names=FALSE,quote=FALSE);
write.table(paste(dadi,collapse=' '),file="../SFS/2d_TIL_BKN.dadi",col.names=FALSE,row.names=FALSE,quote=FALSE,append=TRUE);

##

q()
