setwd("../SNPs")
rawSNPs <- read.table("fooSNPs.txt",header=F,stringsAsFactors=F,sep="\t")
str(rawSNPs)
head <- read.table("../INS/snpCallList.txt")
head
strsplit(head[,1],split="mergedBams/")
head[,1]
head <- read.table("../INS/snpCallList.txt",stringsAsFactors=F)
strsplit(head[,1],split="mergedBams/")
strsplit(head[,1],split=c("mergedBams/","_merged"))
strsplit(head[,1],split=c("mergedBams/","_merged.bam"))
strsplit(head[,1],split="mergedBams/")
unlist(strsplit(head[,1],split="mergedBams/"))
unlist(strsplit(head[,1],split="mergedBams/"))[seq(2,74,2)]
head <- unlist(strsplit(head[,1],split="mergedBams/"))[seq(2,74,2)]
head <- unlist(strsplit(head,split="_merged.bam"))[seq(1,37,2)]
head
head <- read.table("../INS/snpCallList.txt",stringsAsFactors=F)
head <- unlist(strsplit(head[,1],split="mergedBams/"))[seq(2,74,2)]
unlist(strsplit(head,split="_merged.bam"))[seq(1,37,2)]
unlist(strsplit(head,split="_merged.bam"))
head <- unlist(strsplit(head,split="_merged.bam"))
head
str(rawSNPs)
head <- c("chr","pos","Major","Minor",head) #add early columns before taxa
head
1+13+23
37+4
rawSNPs[,42]
str(rawSNPs)
rawSNPs <- read.table("fooSNPs.txt",header=F,stringsAsFactors=F,sep="\t",na.strings="NN")
str(rawSNPs)
rawSNPs <- rawSNPs[,1:41] #remove extra column
head
SNPs <- rawSNPs[,1:41] #remove extra column
names(SNPs)
names(SNPs) <- head
names(SNPs)
fix(SNPs)
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    if( !(data[tripCol] %in% data[popCols])) return "Sub"
}
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    if( !(data[tripCol] %in% data[popCols])) return "Sub"
}
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    if( !(data[tripCol] %in% data[popCols])) return ("Sub")
}
whichAreSubs(data=SNPs[1,])
fix(SNPs)
whichAreSubs(data=SNPs[342,])
unlist(strsplit(SNPs[1,]))
unlist(strsplit(SNPs[1,]),split="")
unlist(strsplit(SNPs[1,],split=""))
unlist(strsplit(SNPs[1,],split=NULL))
unlist(strsplit(SNPs[1,],split=NA))
unlist(strsplit(SNPs[1,]))
unlist(strsplit(SNPs[1,],split=0))
unlist(strsplit(SNPs[1,],split="0"))
unlist(strsplit(SNPs[1,]))
unlist(strsplit(SNPs[1,],split=""))
SNPs[1,]
unlist(strsplit(SNPs[1,5],split=""))
unlist(strsplit(SNPs[2,5],split=""))
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    if( !(unlist(strsplit(data[tripCol],split="")) %in% unlist(strsplit(data[popCols]),split="")) return ("Sub")
}
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    if( !(unlist(strsplit(data[tripCol],split="")) %in% unlist(strsplit(data[popCols]),split=""))) return ("Sub")
}

whichAreSubs(SNPs[1,])
whichAreSubs(SNPs[2,])
whichAreSubs(SNPs[1])
whichAreSubs(data=SNPs[342,])
SNPs[342,]
data <- SNPs[342,]
    if( !(unlist(strsplit(data[tripCol],split="")) %in% unlist(strsplit(data[popCols]),split=""))) return ("Sub")
rm (data)
unlist(strsplit(data[tripCol],split=""))
data=SNPs[342,]
tripCol=5
unlist(strsplit(data[tripCol],split=""))
data[5]
str(data)
data[tripCol]
unlist(strsplit(data[tripCol],split=""))
unlist(strsplit(as.character(data[tripCol]),split=""))
str(data)
data[5]
as.vector(data[5])
unlist(strsplit(data[tripCol],split=""))
unlist(strsplit(as.character(data[tripCol]),split=""))
unique(unlist(strsplit(as.character(data[tripCol]),split="")))
popCols <- 6:41
unique(unlist(strsplit(as.character(data[popCols])),split="")) )
unique(unlist(strsplit(as.character(data[popCols])),split=""))
unique(unlist(strsplit(as.character(data[popCols]),split="")))
unique(unlist(strsplit(as.character(data[popCols]),split="")),na.rm=T)
 unique(unlist(strsplit(as.character(data[popCols]),split=""),na.rm=T))
unique(unlist(strsplit(as.character(data[popCols]),split="",na.rm=T)))
  pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
pop
    pop <- pop[is.na(pop=F)]
    pop <- pop[is.na(pop)==F]
pop
    if( !(trip %in% pop) return ("Sub")
### Function to identify substitutions
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if( !(trip %in% pop) return ("Sub")
}

    if( !(trip %in% pop)) return ("Sub")
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    if( !(trip %in% pop)) return ("Sub")
### Function to identify substitutions
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if( !(trip %in% pop)) return ("Sub")
}


whichAreSubs(SNPs[1])
whichAreSubs(SNPs[1,])
data <- SNPs[1,]
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
trip
    trip <- trip[is.na(trip)==F]
trip
    if( !(trip %in% pop)) return ("Sub")
    if(length(trip) >0)if( !(trip %in% pop)) return ("Sub")
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(trip) >0)if( !(trip %in% pop)) return ("Sub")
}

whichAreSubs(SNPs[1,])
whichAreSubs(SNPs[342,])
whichAreSubs(SNPs[343,])
whichAreSubs(SNPs[344,])
SNPs[343,]
apply(whichAreSubs,SNPs)
apply(SNPs,whichAreSubs)
?apply
apply(SNPs,1,whichAreSubs)
warnings()
c("A","B") %in% c("B","C")
c("A","B") %in% c("B","C","D")
!(c("A","B") %in% c("B","C","D"))
intersect(c("A","B"),c("B","C"))
intersect(c("A","B"),c("B","C","A"))
intersect(c(),c("B","C"))
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(intersect(trip,pop)>0) return ("Sub")
}
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(intersect(trip,pop))>0) return ("Sub")
}
apply(SNPs,1,whichAreSubs)
foo <- apply(SNPs,1,whichAreSubs)
str(foo)
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(trip)>0 & length(sub)>0 & length(intersect(trip,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs)
foo
as.character(foo)
as.vector(foo)
which(foo!=NULL)
which(foo=="Sub")
SNPs[8923,]
whichAreSubs <- function(data,outCols=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCols]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(trip)>0 & length(sub)>0 & length(intersect(trip,pop))==0) return ("Sub")
}
foo <- apply(SNPs,1,whichAreSubs)
whichAreSubs <- function(data,tripCols=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCols]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(trip)>0 & length(sub)>0 & length(intersect(trip,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs)
foo
which(foo=="Sub")
whichAreSubs <- function(data,outCols=5,popCols=6:41){
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(sub)>0 & length(intersect(out,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
length(which(foo=="Sub"))
whichAreSubs <- function(data,outCols=5,popCols=6:41){
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(sub)>0 & length(intersect(out,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
length(which(foo=="Sub"))
str(SNPs)
41-19
head(SNPs)
names(SNPs)
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
which(foo=="Sub")
SNPs[328,]
SNPs[988,]
SNPs[9888,]
data <- SNPs[9888]
data <- SNPs[9888,]
outCols <- 6:18
popCols <- 19:41
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
out
    out <- out[is.na(out)==F]
out
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
pop
    pop <- pop[is.na(pop)==F]
pop
length(out)
length(sub)
is.na(sub)
length(pop)
whichAreSubs <- function(data,outCols=5,popCols=6:41){
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
which(foo="Sub")
foo
which(foo=="Sub")
SNPs[5657,]
x <- SNPs[5657,]
fix(x)
which(is.na(SNPs[3]))
which(is.na(SNPs[3,]))
which(is.na(SNPs[4,]))
is.na(SNPs[4,])
is.na(SNPs[1,])
which(is.na(SNPs[1,]))
popCols
length(popCols)
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) break
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) break    
       
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
SNPs[5657,]
whichAreSubs(SNPs[5657,],outCols=6:18,popCols=19:41)
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) stop()
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) stop()   
       
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
whichAreSubs(SNPs[5657,],outCols=6:18,popCols=19:41)
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
whichAreSubs(SNPs[5657,],outCols=6:18,popCols=19:41)
whichAreSubs(SNPs[5657,])
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("outgroup NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("population NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
whichAreSubs(SNPs[5657,])
foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
as.character(foo)
which(foo=="Sub")
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
foo
as.character(foo)
which(foo=="Sub")
SNPs[7192,]
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) < (missing.limit*length(popCols)) ) return ("outgroup NA Issue")
    if(length(which(is.na(data[outCols]))) < (missing.limit*length(outCols)) ) return ("population NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
foo
which(foo=="Sub")
### Function to identify substitutions
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("population NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("outgroup NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
which(foo=="Sub")
length(which(foo=="Sub"))
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
length(which(foo=="Sub"))
which(foo=="Sub")
SNPs[7192,]
### Function to identify substitutions
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.5){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("population NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("outgroup NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
which(foo=="Sub")
foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
which(foo=="Sub")
length(which(foo=="Sub"))
rawSNPs <- read.table("fooSNPs.txt",header=F,stringsAsFactors=F,sep="\t",na.strings="NN")
nrow(rawSNPs)
SNPs <- rawSNPs[,1:41] #remove extra column
head <- read.table("../INS/snpCallList.txt",stringsAsFactors=F) #load
head <- unlist(strsplit(head[,1],split="mergedBams/"))[seq(2,74,2)] #seperate directory
head <- unlist(strsplit(head,split="_merged.bam")) #remove tail
head <- c("chr","pos","Major","Minor",head) #add early columns before taxa

### Add header
names(SNPs) <- head

str(SNPs)
foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
which(foo=="Sub")
length(which(foo=="Sub"))
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
length(which(foo=="Sub"))
SNPs[100000,]
foo
as.character(foo)[1:1000]
as.character(foo)
TvMT <- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
str(SNPs)
TvMT <- SNPs[which(as.character(TvMT)=="Sub"),1:4]
str(TvMT)
TvMT_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
TvMT <- SNPs[which(as.character(TvMT_result)=="Sub"),c(1:4,5,6)]
TvMT
write.table(TvMT,file="TvMT.txt",row.names=F,col.names=T,quote=F,sep="\t")
TvM_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=19:41,missing.limit=0.2) # trip vs mays
TvM <- SNPs[which(as.character(TvM_result)=="Sub"),c(1:4,5,19)]
nrow(TvMT)
nrow(TvM)
TvT_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:18,missing.limit=0.2) # trip vs mays
TvT <- SNPs[which(as.character(TvT_result)=="Sub"),c(1:4,5,6)]
nrow(TvT)
TevM_result <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41,missing.limit=0.2) # teo vs maize
TevM <- SNPs[which(as.character(TevM_result)=="Sub"),c(1:4,6,19)]
nrow(TevM)
nrow(TvMT)
cat(c("Teo-Maize Subs = ",nrow(TvMT))
)
cat(c("Teo-Maize Subs = ",nrow(TvMT, "/n")))
cat(c("Teo-Maize Subs = ",nrow(TvMT, "\n")))
cat(c("Teo-Maize Subs = ",nrow(TvMT), "\n"))
cat(c("Trip-Maize Subs = ",nrow(TvM), "\n"))
cat(c("Trip-Teo Subs = ",nrow(TvT), "\n"))
cat(c("Teo-Maize Subs = ",nrow(TevM), "\n"))
q()
