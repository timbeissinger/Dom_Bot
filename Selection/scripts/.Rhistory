intersect(c("A","B"),c("B","C","A"))
intersect(c(),c("B","C"))
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(intersect(trip,pop)>0) return ("Sub")
}
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(intersect(trip,pop))>0) return ("Sub")
}
apply(SNPs,1,whichAreSubs)
foo <- apply(SNPs,1,whichAreSubs)
str(foo)
whichAreSubs <- function(data,tripCol=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCol]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(trip)>0 & length(sub)>0 & length(intersect(trip,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs)
foo
as.character(foo)
as.vector(foo)
which(foo!=NULL)
which(foo=="Sub")
SNPs[8923,]
whichAreSubs <- function(data,outCols=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCols]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(trip)>0 & length(sub)>0 & length(intersect(trip,pop))==0) return ("Sub")
}
foo <- apply(SNPs,1,whichAreSubs)
whichAreSubs <- function(data,tripCols=5,popCols=6:41){
    trip <- unique(unlist(strsplit(as.character(data[tripCols]),split="")))
    trip <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(trip)>0 & length(sub)>0 & length(intersect(trip,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs)
foo
which(foo=="Sub")
whichAreSubs <- function(data,outCols=5,popCols=6:41){
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- trip[is.na(trip)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(sub)>0 & length(intersect(out,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
length(which(foo=="Sub"))
whichAreSubs <- function(data,outCols=5,popCols=6:41){
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(sub)>0 & length(intersect(out,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
length(which(foo=="Sub"))
str(SNPs)
41-19
head(SNPs)
names(SNPs)
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
which(foo=="Sub")
SNPs[328,]
SNPs[988,]
SNPs[9888,]
data <- SNPs[9888]
data <- SNPs[9888,]
outCols <- 6:18
popCols <- 19:41
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
out
    out <- out[is.na(out)==F]
out
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
pop
    pop <- pop[is.na(pop)==F]
pop
length(out)
length(sub)
is.na(sub)
length(pop)
whichAreSubs <- function(data,outCols=5,popCols=6:41){
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
which(foo="Sub")
foo
which(foo=="Sub")
SNPs[5657,]
x <- SNPs[5657,]
fix(x)
which(is.na(SNPs[3]))
which(is.na(SNPs[3,]))
which(is.na(SNPs[4,]))
is.na(SNPs[4,])
is.na(SNPs[1,])
which(is.na(SNPs[1,]))
popCols
length(popCols)
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) break
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) break    
       
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
SNPs[5657,]
whichAreSubs(SNPs[5657,],outCols=6:18,popCols=19:41)
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) stop()
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) stop()   
       
    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
whichAreSubs(SNPs[5657,],outCols=6:18,popCols=19:41)
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
whichAreSubs(SNPs[5657,],outCols=6:18,popCols=19:41)
whichAreSubs(SNPs[5657,])
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("outgroup NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("population NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
whichAreSubs(SNPs[5657,])
foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
as.character(foo)
which(foo=="Sub")
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
foo
as.character(foo)
which(foo=="Sub")
SNPs[7192,]
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) < (missing.limit*length(popCols)) ) return ("outgroup NA Issue")
    if(length(which(is.na(data[outCols]))) < (missing.limit*length(outCols)) ) return ("population NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
foo
which(foo=="Sub")
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.8){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("population NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("outgroup NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
which(foo=="Sub")
length(which(foo=="Sub"))
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
length(which(foo=="Sub"))
which(foo=="Sub")
SNPs[7192,]
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.5){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("population NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("outgroup NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}

foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
which(foo=="Sub")
foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
which(foo=="Sub")
length(which(foo=="Sub"))
rawSNPs <- read.table("fooSNPs.txt",header=F,stringsAsFactors=F,sep="\t",na.strings="NN")
nrow(rawSNPs)
SNPs <- rawSNPs[,1:41] #remove extra column
head <- read.table("../INS/snpCallList.txt",stringsAsFactors=F) #load
head <- unlist(strsplit(head[,1],split="mergedBams/"))[seq(2,74,2)] #seperate directory
head <- unlist(strsplit(head,split="_merged.bam")) #remove tail
head <- c("chr","pos","Major","Minor",head) #add early columns before taxa

names(SNPs) <- head

str(SNPs)
foo <- apply(SNPs,1,whichAreSubs) # trip vs mays
which(foo=="Sub")
length(which(foo=="Sub"))
foo <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41) # teo vs maize
length(which(foo=="Sub"))
SNPs[100000,]
foo
as.character(foo)[1:1000]
as.character(foo)
TvMT <- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
str(SNPs)
TvMT <- SNPs[which(as.character(TvMT)=="Sub"),1:4]
str(TvMT)
TvMT_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
TvMT <- SNPs[which(as.character(TvMT_result)=="Sub"),c(1:4,5,6)]
TvMT
write.table(TvMT,file="TvMT.txt",row.names=F,col.names=T,quote=F,sep="\t")
TvM_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=19:41,missing.limit=0.2) # trip vs mays
TvM <- SNPs[which(as.character(TvM_result)=="Sub"),c(1:4,5,19)]
nrow(TvMT)
nrow(TvM)
TvT_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:18,missing.limit=0.2) # trip vs mays
TvT <- SNPs[which(as.character(TvT_result)=="Sub"),c(1:4,5,6)]
nrow(TvT)
TevM_result <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41,missing.limit=0.2) # teo vs maize
TevM <- SNPs[which(as.character(TevM_result)=="Sub"),c(1:4,6,19)]
nrow(TevM)
nrow(TvMT)
cat(c("Teo-Maize Subs = ",nrow(TvMT))
)
cat(c("Teo-Maize Subs = ",nrow(TvMT, "/n")))
cat(c("Teo-Maize Subs = ",nrow(TvMT, "\n")))
cat(c("Teo-Maize Subs = ",nrow(TvMT), "\n"))
cat(c("Trip-Maize Subs = ",nrow(TvM), "\n"))
cat(c("Trip-Teo Subs = ",nrow(TvT), "\n"))
cat(c("Teo-Maize Subs = ",nrow(TevM), "\n"))
q()
setwd("../SNPs")
rawSNPs <- read.table("fooSNPs.txt",header=F,stringsAsFactors=F,sep="\t",na.strings="NN")
SNPs <- rawSNPs[,1:41] #remove extra column
head <- read.table("../INS/snpCallList.txt",stringsAsFactors=F) #load
head <- unlist(strsplit(head[,1],split="mergedBams/"))[seq(2,74,2)] #seperate directory
head <- unlist(strsplit(head,split="_merged.bam")) #remove tail
head <- c("chr","pos","Major","Minor",head) #add early columns before taxa
names(SNPs) <- head
str(SNPs)
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.5){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("population NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("outgroup NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
TvMT_result <- c()
for(i in 1:nrow(SNPs)){
    print(i)
    TvMT_result <- whichAreSubs(SNPs[i,],outCols=5,popCols=6:41,missing.limit=0.2)
}

TvMT_result[1:100]
TvMT_result <- c()
for(i in 1:nrow(SNPs)){
    print(i)
    TvMT_result[i] <- whichAreSubs(SNPs[i,],outCols=5,popCols=6:41,missing.limit=0.2)
}
whichAreSubs(SNPs[i,],outCols=5,popCols=6:41,missing.limit=0.2)
i
TvMT_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
TvMT_result[2]
TvMT_result[1]
TvMT_result[4] <- NULL
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.5){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("population NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("outgroup NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
    else return ("Not")
}
TvMT_result <- c()
for(i in 1:nrow(SNPs)){
    print(i)
    TvMT_result[i] <- whichAreSubs(SNPs[i,],outCols=5,popCols=6:41,missing.limit=0.2)
}
TvMT_result <- c()
for(i in 1:nrow(SNPs)){
    TvMT_result[i] <- whichAreSubs(SNPs[i,],outCols=5,popCols=6:41,missing.limit=0.2)
}
TvMT_result[1:100]
SNPs <- rbind(SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs,SNPs)
length <- nrow(SNPs)
length
floor(length/1000000)
starts <- c(1:floor)*1000000
floor <- floor(length/1000000) # find lowest million
starts <- c(1:floor)*1000000
starts
stops <- c(starts[1:{length(starts)-1}]+999999,length)
stops
starts <-c(1, c(1:floor)*1000000 +1)
starts
stops <- c(starts[1:{length(starts)-1}]+999998,length)
stops
stops <- c(starts[1:{length(starts)-1}]+999999,length)
stops
starts
stops
TvMT_mat <- matrix(NA,nrow=1000000,ncol=length(starts))
dim(TvMT_mat)
TvMT_mat <- matrix(NA,nrow=1000000,ncol=length(starts))
for(c in 1:length(starts)){
    SNPsub <- SNPs[starts[c]:stops[c],]
    TvMT_mat[,c] <- apply(SNPsub,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
}

for(c in 1:length(starts)){
    print(c)
    SNPsub <- SNPs[starts[c]:stops[c],]
    TvMT_mat[,c] <- apply(SNPsub,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
}

foo <- as.vector(TvMT_mat,byrow=F)
foo <- as.vector(TvMT_mat)
str(foo)
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.5){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("population NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("outgroup NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
?as.vector
TvMT_result <- c()#matrix(NA,nrow=1000000,ncol=length(starts))
for(c in 1:length(starts)){
    print(c)
    SNPsub <- SNPs[starts[c]:stops[c],]
    TvMT_result[starts[c]:stops[c]] <- apply(SNPsub,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
}

TvMT_result <- c()#matrix(NA,nrow=1000000,ncol=length(starts))
for(c in 1:length(starts)){
    print(paste(starts[c],":",stops[c],sep="")
    SNPsub <- SNPs[starts[c]:stops[c],]
    TvMT_result[starts[c]:stops[c]] <- apply(SNPsub,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
}
TvMT_result <- c()#matrix(NA,nrow=1000000,ncol=length(starts))
for(c in 1:length(starts)){
    print(paste(starts[c],":",stops[c],sep=""))
    SNPsub <- SNPs[starts[c]:stops[c],]
    TvMT_result[starts[c]:stops[c]] <- apply(SNPsub,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
}
foo <- TvMT_result
TvMT_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
which(foo != TvMT_result)
str(foo)
str(TvMT_result)
which(as.character(foo) != as.character(TvMT_result))
q()
setwd("../SNPs")
rawSNPs <- read.table("fooSNPs.txt",header=F,stringsAsFactors=F,sep="\t",na.strings="NN")
nrow(rawSNPs)
SNPs <- rawSNPs[,1:41] #remove extra column
head <- read.table("../INS/snpCallList.txt",stringsAsFactors=F) #load
head <- unlist(strsplit(head[,1],split="mergedBams/"))[seq(2,74,2)] #seperate directory
head <- unlist(strsplit(head,split="_merged.bam")) #remove tail
head <- c("chr","pos","Major","Minor",head) #add early columns before taxa

names(SNPs) <- head
### Function to identify substitutions
whichAreSubs <- function(data,outCols=5,popCols=6:41,missing.limit=0.5){
    if(length(which(is.na(data[popCols]))) > (missing.limit*length(popCols)) ) return ("population NA Issue")
    if(length(which(is.na(data[outCols]))) > (missing.limit*length(outCols)) ) return ("outgroup NA Issue")

    out <- unique(unlist(strsplit(as.character(data[outCols]),split="")))
    out <- out[is.na(out)==F]
    pop <- unique(unlist(strsplit(as.character(data[popCols]),split="")))
    pop <- pop[is.na(pop)==F]
    if(length(out)>0 & length(pop)>0 & length(intersect(out,pop))==0) return ("Sub")
}
length <- nrow(SNPs) # count number of SNPs
length
floor <- floor(length/1000000) # find lowest million
floor
starts <-c(1, c(1:floor)*1000000 +1)
starts
stops <- c(starts[1:{length(starts)-1}]+999999,length)
stops
TvMT_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:41,missing.limit=0.2) # trip vs mays
TvM_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=19:41,missing.limit=0.2) # trip vs maize
TvT_result<- apply(SNPs,1,whichAreSubs,outCols=5,popCols=6:18,missing.limit=0.2) # trip vs teo
TevM_result <- apply(SNPs,1,whichAreSubs,outCols=6:18,popCols=19:41,missing.limit=0.2) # teo vs maize
cat(c("Trip-Maize/Teo Subs = ",nrow(TvMT), "\n"))
TvM <- SNPs[which(as.character(TvM_result)=="Sub"),c(1:4,5,19)]
TvT <- SNPs[which(as.character(TvT_result)=="Sub"),c(1:4,5,6)]
TevM <- SNPs[which(as.character(TevM_result)=="Sub"),c(1:4,6,19)]
cat(c("Trip-Maize/Teo Subs = ",nrow(TvMT), "\n"))
TvMT <- SNPs[which(as.character(TvMT_result)=="Sub"),c(1:4,5,6)]
cat(c("Trip-Maize/Teo Subs = ",nrow(TvMT), "\n"))
cat(c("Trip-Maize Subs = ",nrow(TvM), "\n"))
cat(c("Trip-Teo Subs = ",nrow(TvT), "\n"))
cat(c("Teo-Maize Subs = ",nrow(TevM), "\n"))
str(TvMT_result)
which(TvMT_result==NULL)[1:100]
length(which(TvMT_result==NULL))
length(which(is.null(TvMT_result)))
as.character(TvMT_result)[1:100]
length(which(as.character(TvMT_result) == "NULL"))
TvMT_tested <- SNPs$pos[which(as.character(TvMT_result) == "NULL")]
length(TvMT_tested)
hist(TvMT_tested)
foo <- sample(TvMT_tested,1164)
hist(foo)
hist(foo,breaks=100)
hist(TvMT$pos,breaks=100)
uni_subs <- sample(TvMT_tested,nrow(TvMT))
uni_subs
uni_subs <- uni_subs[order(uni_subs)]
uni_subs
TvMT_tested <- SNPs$pos[which(as.character(TvMT_result) == "NULL" | as.character(TvMT_result) =="Sub" )]
nrow(TvMT_tested)
str(TvMT_result)
TvMT_tested <- SNPs$pos[which(as.character(TvMT_result) == "NULL" | as.character(TvMT_result) =="Sub" )]
TvMT_tested
length(TvMT_tested)
uni_subs <- sample(TvMT_tested,nrow(TvMT))
uni_subs <- uni_subs[order(uni_subs)]
uni_gap <- uni_subs-c(1,uni_subs[1:{length(uni_subs)-1}])
uni_gap
max(uni_gap)
min(uni_gap)
length(which(uni_gap<=20))
gap <- TvMT$pos-c(1,TvMT$pos[1:{length(TvMT$pos)-1}])
gap
length(which(gap<=20))
min(gap)
max(gap)
hist(uni_gap)
hist(uni_gap,breaks=100)
hist(gap,breaks=100)
denisty.plot(gap)
plot(density(gap))
lines(denisty(uni_gap))
lines(density(uni_gap))
hist(gap,breaks=100,freq=F)
lines(density(gap))
lines(density(uni_gap))
hist(gap,breaks=100,freq=F)
lines(density(gap))
lines(density(uni_gap))
plot(density(gap),col="red",lwd=3)
lines(density(uni_gap),col="blue",lwd=3)
legend("topright","(x,y)",c("Observed distance between substitutions","Expected distribution between substitutions"),lwd=3,col=c("red","blue"))
pdf("Observed_vs_expected.pdf")
plot(density(gap),col="red",lwd=3,main="Density of substitution spacing",xlab="Space between subs")
plot(density(uni_gap),col="blue",lwd=3)
legend("topright","(x,y)",c("Observed distance between substitutions","Expected distribution between substitutions"),lwd=3,col=c("red","blue"))
dev.off()
pdf("Observed_vs_expected.pdf")
plot(density(gap),col="red",lwd=3,main="Density of substitution spacing",xlab="Space between subs")
lines(density(uni_gap),col="blue",lwd=3)
legend("topright","(x,y)",c("Observed distance between substitutions","Expected distribution between substitutions"),lwd=3,col=c("red","blue"))
dev.off()
hist(TvMT$pos)
hist(TvMT$pos,breaks=100,xlab="Substitution positions",main="Observed distribution of substitutions at the start of chromosome 1")
hist(uni_subs,breaks=100,xlab="Substitution positions",main="Expected distribution of substitutions at the start of chromosome 1")
hist(TvMT$pos,breaks=100,xlab="Substitution positions",main="Observed distribution of substitutions at the start of chromosome 1")
par(mfrow=c(2,1))
hist(TvMT$pos,breaks=100,xlab="Substitution positions",main="Observed distribution of substitutions at the start of chromosome 1")
hist(uni_subs,breaks=100,xlab="Substitution positions",main="Expected distribution of substitutions at the start of chromosome 1")

pdf("Observed_vs_expected.pdf")
par(mfrow=c(2,1))
hist(TvMT$pos,breaks=100,xlab="Substitution positions",main="Observed distribution of substitutions at the start of chromosome 1")
hist(uni_subs,breaks=100,xlab="Substitution positions",main="Expected distribution of substitutions at the start of chromosome 1")
plot(density(gap),col="red",lwd=3,main="Density of substitution spacing",xlab="Space between subs")
lines(density(uni_gap),col="blue",lwd=3)
legend("topright","(x,y)",c("Observed distance between substitutions","Expected distribution between substitutions"),lwd=3,col=c("red","blue"))
dev.off()

pdf("Observed_vs_expected.pdf")
par(mfrow=c(2,1))
hist(TvMT$pos,breaks=100,xlab="Substitution positions",main="Observed distribution of substitutions at the start of chromosome 1")
hist(uni_subs,breaks=100,xlab="Substitution positions",main="Expected distribution of substitutions at the start of chromosome 1")
par(mfrow=c(1,1))
plot(density(gap),col="red",lwd=3,main="Density of substitution spacing",xlab="Space between subs")
lines(density(uni_gap),col="blue",lwd=3)
legend("topright","(x,y)",c("Observed distance between substitutions","Expected distribution between substitutions"),lwd=3,col=c("red","blue"))
dev.off()
plot(density(gap),col="red",lwd=3,main="Density of substitution spacing",xlab="Space between subs",xlim=c(0,50000),ylim=c(0,0.003)))
plot(density(gap),col="red",lwd=3,main="Density of substitution spacing",xlab="Space between subs",xlim=c(0,50000),ylim=c(0,0.003))
par(mfrow=c(1,1))
plot(density(gap),col="red",lwd=3,main="Density of substitution spacing",xlab="Space between subs",xlim=c(0,50000),ylim=c(0,0.003))
lines(density(uni_gap),col="blue",lwd=3)
length(TvMT_tested)
which(uni_gap<21)
length(which(uni_gap<21))
length(which(gap<21))
q()
