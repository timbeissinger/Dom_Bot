	-> Command: 
/home/beissing/bin/angsd0.609/angsd -bam INS/TIL_list.txt -out /home/beissing/Dom_Bot_Git/WholeGenome/OUTS/TIL_intergenic -doMajorMinor 1 -doMaf 1 -indF INS/TIL.indF -doSaf 2 -uniqueOnly 0 -anc /home/beissing/Dom_Bot_Git/DATA/TRIP/TRIP.fa.gz -minMapQ 30 -minQ 20 -nInd 13 -minInd 10 -baq 1 -ref /group/jrigrp3/bottleneckProject/genomes/Zea_mays.AGPv3.22.dna.genome.fa -GL 1 -P 32 -rf /home/beissing/Dom_Bot_Git/WholeGenome/INS/intergenicRegionFile.txt 
	-> angsd version: 0.608	 build(Jul  2 2014 11:07:01)
	-> Thu Aug  7 11:32:35 2014
----------------
multiReader.cpp:
-nLines=50
-bytesPerLine=33554432
	-beagle	(null)	(Beagle Filename (can be .gz))
	-glf	(null)	(glf Filename (can be .gz))
	-pileup	(null)	(pileup Filename (can be .gz))
	-intName=1	(Assume First column is chr_position)
	-isSim=1	(Assume First column is chr_position)
	-from=-1	(Assume First column is chr_position)
	-to=-1	(Assume First column is chr_position)
	-nInd=13	(Assume First column is chr_position)
	-minQ=20	(minium q only used in pileupreader)
----------------
multiReader.cpp:
---------------
parseArgs_bambi.cpp: bam reader:
	-r		(null)	Supply a single region in commandline (see examples below)
	-rf		/home/beissing/Dom_Bot_Git/WholeGenome/INS/intergenicRegionFile.txt	Supply multiple regions in a file (see examples below)
	-remove_bads	1	Discard 'bad' reads, (flag >=255) 
	-uniqueOnly	0	Discards reads that doesn't map uniquely
	-show		0	Mimic 'samtools mpileup' also supply -ref fasta for printing reference column
	-minMapQ	30	Discard reads with mapping quality below
	-minQ		20	Discard bases with base quality below
	-trim		0	Number of based to discard at both ends of the reads
	-only_proper_pairs	1	Only use reads where the mate could be mapped
	-C		0	adjust mapQ for excessive mismatches (as SAMtools), supply -ref
	-baq		1	adjust qscores around indels (as SAMtools), supply -ref
	-if		2	include flags for each read
	-df		4	discard flags for each read

Examples for region specification:
		chr:		Use entire chromosome: chr
		chr:start-	Use region from start to end of chr
		chr:-stop	Use region from beginning of chromosome: chr to stop
		chr:start-stop	Use region from start to stop from chromosome: chr
		chr:site	Use single site on chromosome: chr
Will include read if:
	includeflag:[2] each segment properly aligned according to the aligner, 
Will discard read if:
	discardflag:[4] segment unmapped, 
--------------------
[shared.cpp:init()]
	-nThreads	32	Number of threads to use
	-nQueueSize	-1	Maximum number of queud elements
	-howOften	100	How often should the program show progress
--------------
abcFilter.cpp:
	-sites		(null)	(File containing sites to keep (chr tab pos))
	-minInd		10	Only use site if atleast minInd of samples has data
	You can force major/minor by -doMajorMinor 3
	And make sure file contains 4 columns (chr tab pos tab major tab minor)
---------------
abcGetFasta.cpp:

	-ref	/group/jrigrp3/bottleneckProject/genomes/Zea_mays.AGPv3.22.dna.genome.fa	(afile.fasta)
	-anc	/home/beissing/Dom_Bot_Git/DATA/TRIP/TRIP.fa.gz	(afile.fasta)
	NB these fasta files should be indexed 'samtools faidx'

---------------
abcCounts.cpp:
	-doCounts	0	(Count the number A,C,G,T. All sites, All samples)
	-minQfile	(null)	 file with individual quality score thresholds)
	-setMaxDepth	-1	(If total depth is larger then site is removed from analysis.
				 -1 indicates no filtering)
	-setMinDepth	-1	(If total depth is smaller then site is removed from analysis.
				 -1 indicates no filtering)
	-minInd		10	(Discard site if effective sample size below value.
				 0 indicates no filtering)
Filedumping:
	-doDepth	0	(dump distribution of seqdepth)	.depthSample,.depthGlobal
	  -maxDepth	100	(bin together high depths)
	-doQsDist	0	(dump distribution of qscores)	.qs
	-dumpCounts	0
	  1: total seqdepth for site	.pos.gz
	  2: seqdepth persample		.pos.gz,.counts.gz
	  3: A,C,G,T sum over samples	.pos.gz,.counts.gz
	  4: A,C,G,T sum every sample	.pos.gz,.counts.gz
	-iCounts	0 (Internal format for dumping binary single chrs)
---------------------
abcError.cpp:
-doError	0
	1: SYK method, joint typespecific errors (Multisample)
	-minSites	10000
	-errors		(null)	(Filename for starterrors)
	-emIter		100
	-minPhat	0.005000	(Minimum phat)
	-eps		0.001000	(Estimate of errorrate)
	NB this method requires -doMajorMinor 2

---------------------
abcGL.cpp:
	-GL=1: 
	1: SAMtools
	2: GATK
	3: SOAPsnp
	4: SYK
	-trim		0		(zero means no trimming)
	-tmpdir		angsd_tmpdir/	(used by SOAPsnp)
	-errors		(null)		(used by SYK)
	-minInd		10		(0 indicates no filtering)

Filedumping:
	-doGlf	0
	1: binary glf (10 log likes)	.glf.gz
	2: beagle likelihood file	.beagle.gz
	3: binary 3 times likelihood	.glf.gz
	4: text version (10 log likes)	.glf.gz

---------------------
abcGL.cpp:
	-GL=1: 
	1: SAMtools
	2: GATK
	3: SOAPsnp
	4: SYK
	-trim		0		(zero means no trimming)
	-tmpdir		angsd_tmpdir/	(used by SOAPsnp)
	-errors		(null)		(used by SYK)
	-minInd		10		(0 indicates no filtering)

Filedumping:
	-doGlf	0
	1: binary glf (10 log likes)	.glf.gz
	2: beagle likelihood file	.beagle.gz
	3: binary 3 times likelihood	.glf.gz
	4: text version (10 log likes)	.glf.gz

-------------------
abcMajorMinor.cpp:
	-doMajorMinor	1
	1: Infer major and minor from GL
	2: Infer major and minor from allele counts
	3: use major and minor from a file (requires -sites file.txt)
	4: Use reference allele as major (requires -ref)
	5: Use ancestral allele as major (requires -anc)
------------------------
abcFreq.cpp:
-doMaf	1 (Calculate persite frequencies '.mafs.gz')
	1: Frequency (fixed major and minor)
	2: Frequency (fixed major unknown minor)
	4: Frequency from genotype probabilities
	8: AlleleCounts based method (known major minor)
	NB. Filedumping is supressed if value is negative
-doPost	0	(Calculate posterior prob 3xgprob)
	1: Using frequency as prior
	2: Using uniform prior
Filters:
	-minMaf  	-1.000000	(Remove sites with MAF below)
	-SNP_pval	1.000000	(Remove sites with a pvalue larger)
Extras:
	-ref	/group/jrigrp3/bottleneckProject/genomes/Zea_mays.AGPv3.22.dna.genome.fa	(Filename for fasta reference)
	-anc	/home/beissing/Dom_Bot_Git/DATA/TRIP/TRIP.fa.gz	(Filename for fasta ancestral)
	-eps	0.001000 [Only used for -doMaf &8]
	-beagleProb	0 (Dump beagle style postprobs)
	-indFname	INS/TIL.indF (file containing individual inbreedcoeficients)
NB These frequency estimators requires major/minor -doMajorMinor
-------------
abcAsso.cpp:
	-doAsso	0
	1: Frequency Test (Known Major and Minor)
	2: Score Test
	3: Frequency Test (Unknown Minor)	
  Frequency Test Options:
	-yBin		(null)	(File containing disease status)	

  Score Test Options:
	-yBin		(null)	(File containing disease status)
	-yQuant		(null)	(File containing phenotypes)
	-minHigh	10	(Require atleast minHigh number of high credible genotypes)
	-minCount	10	(Require this number of minor alleles, estimated from MAF)
	-cov		(null)	(File containing additional covariates)
	-model	1
	1: Additive/Log-Additive (Default)
	2: Dominant
	3: Recessive

Examples:
	Perform Frequency Test
	  './angsd -yBin pheno.ybin -doAsso 1 -GL 1 -out out -doMajorMinor 1 -minLRT 24 -doMaf 2 -doSNP 1 -bam bam.filelist'
	Perform Score Test
	  './angsd -yBin pheno.ybin -doAsso 2 -GL 1 -doPost 1 -out out -doMajorMinor 1 -minLRT 24 -doMaf 2 -doSNP 1 -bam bam.filelist'

-------------
abcHWE.cpp:
	-HWE_pval	0.000000

--------------
abcAncError.cpp:
	-doAncError	0
	(Sampling strategies)
	 0:	 no error estimation 
	 1:	 (Use all bases)
	 2:	 (Sample single base)
	 3:	 (Sample first base)
Required:
	-ref	/group/jrigrp3/bottleneckProject/genomes/Zea_mays.AGPv3.22.dna.genome.fa	(fastafile containg 'perfect' sample)
	-anc	/home/beissing/Dom_Bot_Git/DATA/TRIP/TRIP.fa.gz	(fastafile containg outgroup)

NB: the -ref should be a fasta for a sample where you assume no errors.
We measure the difference between the outgroup and your -ref sample.
The statistic is then the excess of substitutions between your BAM file and outgroup, compared to the perfect sample. After the ANGSD run use:  Rscript R/estError.R file=angsdput.ancerror
-----------------
abcCallGenotypes.cpp:

-doGeno	0
	1: write major and minor
	2: write the called genotype encoded as